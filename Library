--obfuscated by bmh#7171

do
	local v0 = tonumber;
	local v1 = string.byte;
	local v2 = string.char;
	local v3 = string.sub;
	local v4 = string.gsub;
	local v5 = string.rep;
	local v6 = table.concat;
	local v7 = table.insert;
	local v8 = getfenv or function()
		return _ENV;
	end;
	local v9 = setmetatable;
	local v10 = pcall;
	local v11 = select;
	local v12 = unpack or table.unpack;
	local v13 = tonumber;
	local function v14(v15, v16)
		local v17 = 1;
		local v18;
		v15 = v4(v3(v15, 5), "..", function(v29)
			if (v1(v29, 2) == 79) then
				v18 = v0(v3(v29, 1, 1));
				return "";
			else
				local v64 = v2(v0(v29, 16));
				if v18 then
					local v74 = v5(v64, v18);
					v18 = nil;
					return v74;
				else
					return v64;
				end
			end
		end);
		local function v19(v30, v31, v32)
			if v32 then
				local v65 = (v30 / ((2 + 0) ^ (v31 - 1))) % ((2 + (0 - 0)) ^ (((v32 - 1) - (v31 - (1809 - (342 + 1466)))) + (1 - (0 - 0))));
				return v65 - (v65 % (2 - 1));
			else
				local v66 = (0 + 0) - 0;
				local v67;
				while true do
					if (v66 == (0 + 0)) then
						v67 = (337 - (276 + (82 - 23))) ^ (v31 - (2 - 1));
						return (((v30 % (v67 + v67)) >= v67) and (2 - 1)) or (0 + (0 - 0));
					end
				end
			end
		end
		local function v20()
			local v37 = 0 + 0 + 0;
			local v38;
			while true do
				if (v37 == 1) then
					return v38;
				end
				if (v37 == ((2059 - (108 + 1514)) - (237 + 200))) then
					v38 = v1(v15, v17, v17);
					v17 = v17 + 1 + (1529 - (487 + 1042));
					v37 = 1;
				end
			end
		end
		local function v21()
			local v39, v40 = v1(v15, v17, v17 + 1 + 1);
			v17 = v17 + 1 + 1;
			return (v40 * 256) + v39;
		end
		local function v22()
			local v41, v42, v43, v44 = v1(v15, v17, v17 + (1875 - (744 + 764 + 364)));
			v17 = v17 + (108 - (100 + (17 - 13)));
			return (v44 * (16778318 - (584 + 113 + 405))) + (v43 * (65915 - (347 + 32))) + (v42 * 256) + v41;
		end
		local function v23()
			local v45 = 0 + 0;
			local v46;
			local v47;
			while true do
				if (1 == v45) then
					return ((-(2 + 0) * v19(v47, 1040 - (499 + 509))) + 1) * ((1206 - (446 + (1661 - (745 + 158)))) ^ (v19(v47, 14 + 7, 38 - 7) - (3008 - ((1518 - 1121) + 1588)))) * ((((v19(v47, 3 - 2, 14 + 6) * ((1 + 1) ^ (49 - 17))) + v46) / ((7 - 5) ^ (367 - (108 + 207)))) + (529 - (506 + 22)));
				end
				if (v45 == (0 + 0)) then
					v46 = v22();
					v47 = v22();
					v45 = (2098 - (1288 + 106)) - (18 + 685);
				end
			end
		end
		local function v24(v33)
			local v48;
			if not v33 then
				local v68 = (456 - (410 + 46)) + 0;
				while true do
					if (v68 == (243 - (218 + (57 - 32)))) then
						v33 = v22();
						if (v33 == (0 + 0)) then
							return "";
						end
						break;
					end
				end
			end
			v48 = v3(v15, v17, (v17 + v33) - (1 + 0 + 0));
			v17 = v17 + v33;
			local v49 = {};
			for v62 = 1054 - (574 + 479), #v48 do
				v49[v62] = v2(v1(v3(v48, v62, v62)));
			end
			return v6(v49);
		end
		local v25 = v22;
		local function v26(...)
			return {...}, v11("#", ...);
		end
		local function v27()
			local v50 = 0;
			local v51;
			local v52;
			local v53;
			local v54;
			local v55;
			local v56;
			local v57;
			local v58;
			while true do
				if (v50 ~= (2 - 1)) then
				else
					v53 = nil;
					v54 = nil;
					v50 = 5 - 3;
				end
				if (v50 ~= (0 + 0)) then
				else
					v51 = 0 - 0;
					v52 = nil;
					v50 = 1;
				end
				if ((1898 - (973 + 921)) == v50) then
					while true do
						if (v51 == (4 - 1)) then
							v58 = nil;
							while true do
								local v93 = 0 - 0;
								while true do
									if (v93 ~= 0) then
									else
										if (0 ~= v52) then
										else
											local v96 = 0;
											local v97;
											while true do
												if (v96 == 0) then
													v97 = 0;
													while true do
														if (v97 ~= (1211 - (1056 + 154))) then
														else
															v55 = {};
															v52 = 1;
															break;
														end
														if (v97 == (0 + 0)) then
															local v114 = 0;
															while true do
																if (v114 ~= 1) then
																else
																	v97 = 1;
																	break;
																end
																if (v114 ~= (0 - 0)) then
																else
																	v53 = {};
																	v54 = {};
																	v114 = 1;
																end
															end
														end
													end
													break;
												end
											end
										end
										if (v52 ~= 3) then
										else
											local v98 = 0;
											local v99;
											while true do
												if (v98 == 0) then
													v99 = 0 - 0;
													while true do
														local v103 = 0;
														while true do
															if (v103 == 0) then
																if (v99 ~= (0 - 0)) then
																else
																	local v115 = 0 + 0;
																	while true do
																		if (v115 == 1) then
																			v99 = 1;
																			break;
																		end
																		if (v115 == 0) then
																			for v183 = 1, v22() do
																				v54[v183 - 1] = v27();
																			end
																			for v185 = 1, v22() do
																				v55[v185] = v22();
																			end
																			v115 = 1 - 0;
																		end
																	end
																end
																if ((1 + 0) ~= v99) then
																else
																	return v56;
																end
																break;
															end
														end
													end
													break;
												end
											end
										end
										v93 = 1;
									end
									if (v93 ~= (981 - (734 + 246))) then
									else
										if (v52 ~= (1641 - (1447 + 192))) then
										else
											local v100 = 0;
											while true do
												if (v100 == (0 - 0)) then
													for v104 = 1, v57 do
														local v105 = 0;
														local v106;
														local v107;
														local v108;
														local v109;
														while true do
															if (v105 ~= 2) then
															else
																while true do
																	if (0 ~= v106) then
																	else
																		local v121 = 0;
																		while true do
																			if (v121 ~= 1) then
																			else
																				v106 = 1;
																				break;
																			end
																			if (v121 ~= (0 - 0)) then
																			else
																				v107 = 528 - (488 + 40);
																				v108 = nil;
																				v121 = 1;
																			end
																		end
																	end
																	if (v106 == 1) then
																		v109 = nil;
																		while true do
																			if (v107 ~= (1 + 0)) then
																			else
																				if (v108 == 1) then
																					v109 = v20() ~= 0;
																				elseif (v108 == 2) then
																					v109 = v23();
																				elseif (v108 == 3) then
																					v109 = v24();
																				end
																				v58[v104] = v109;
																				break;
																			end
																			if (0 ~= v107) then
																			else
																				v108 = v20();
																				v109 = nil;
																				v107 = 330 - (145 + 184);
																			end
																		end
																		break;
																	end
																end
																break;
															end
															if (v105 == (1671 - (854 + 816))) then
																v108 = nil;
																v109 = nil;
																v105 = 2;
															end
															if (v105 ~= 0) then
															else
																v106 = 0;
																v107 = nil;
																v105 = 1;
															end
														end
													end
													v56[3] = v20();
													v100 = 1 - 0;
												end
												if ((378 - (123 + 254)) == v100) then
													for v110 = 1 + 0, v22() do
														local v111 = 0 - 0;
														local v112;
														while true do
															if (v111 ~= (1814 - (52 + 1762))) then
															else
																v112 = v20();
																if (v19(v112, 1, 1848 - (1080 + 767)) == (0 + 0)) then
																	local v116 = 0;
																	local v117;
																	local v118;
																	local v119;
																	local v120;
																	while true do
																		if (v116 == (2 - 1)) then
																			local v135 = 0 + 0;
																			while true do
																				if (v135 == (1198 - (660 + 538))) then
																					v119 = nil;
																					v120 = nil;
																					v135 = 2 - 1;
																				end
																				if ((2 - 1) == v135) then
																					v116 = 2;
																					break;
																				end
																			end
																		end
																		if (v116 == 2) then
																			while true do
																				if (v117 ~= (770 - (14 + 753))) then
																				else
																					if (v19(v119, 3, 12 - 9) == (195 - (27 + 167))) then
																						v120[4] = v58[v120[4 - 0]];
																					end
																					v53[v110] = v120;
																					break;
																				end
																				if (2 ~= v117) then
																				else
																					if (v19(v119, 1, 1 + 0) ~= 1) then
																					else
																						v120[2] = v58[v120[2]];
																					end
																					if (v19(v119, 1 + 1, 2) ~= 1) then
																					else
																						v120[12 - 9] = v58[v120[3]];
																					end
																					v117 = 647 - (351 + 293);
																				end
																				if (v117 ~= 1) then
																				else
																					v120 = {v21(),v21(),nil,nil};
																					if (v118 == (1717 - (899 + 818))) then
																						local v197 = 0 + 0;
																						while true do
																							if (v197 ~= 0) then
																							else
																								v120[8 - 5] = v21();
																								v120[3 + 1] = v21();
																								break;
																							end
																						end
																					elseif (v118 == 1) then
																						v120[8 - 5] = v22();
																					elseif (v118 == (5 - 3)) then
																						v120[881 - (490 + 388)] = v22() - ((6 - 4) ^ 16);
																					elseif (v118 ~= (9 - 6)) then
																					else
																						local v225 = 0;
																						local v226;
																						local v227;
																						while true do
																							if (v225 ~= (587 - (553 + 34))) then
																							else
																								v226 = 0 - 0;
																								v227 = nil;
																								v225 = 1;
																							end
																							if (v225 == 1) then
																								while true do
																									if (0 == v226) then
																										v227 = 0 - 0;
																										while true do
																											if (v227 == 0) then
																												v120[10 - 7] = v22() - ((4 - 2) ^ 16);
																												v120[887 - (724 + 159)] = v21();
																												break;
																											end
																										end
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					v117 = 1 + 1;
																				end
																				if (v117 == 0) then
																					local v189 = 0 - 0;
																					local v190;
																					while true do
																						if (v189 ~= (0 + 0)) then
																						else
																							v190 = 125 - (46 + 79);
																							while true do
																								if (v190 ~= (0 + 0)) then
																								else
																									local v221 = 1791 - (299 + 1492);
																									while true do
																										if (v221 ~= 0) then
																										else
																											v118 = v19(v112, 2, 3);
																											v119 = v19(v112, 15 - 11, 6);
																											v221 = 1 + 0;
																										end
																										if (v221 == 1) then
																											v190 = 1;
																											break;
																										end
																									end
																								end
																								if (v190 ~= (73 - (36 + 36))) then
																								else
																									v117 = 1 - 0;
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if ((0 + 0) == v116) then
																			local v136 = 0;
																			while true do
																				if (v136 ~= 0) then
																				else
																					v117 = 0 - 0;
																					v118 = nil;
																					v136 = 1;
																				end
																				if (v136 ~= 1) then
																				else
																					v116 = 1;
																					break;
																				end
																			end
																		end
																	end
																end
																break;
															end
														end
													end
													v52 = 4 - 1;
													break;
												end
											end
										end
										if (v52 == (632 - (329 + 302))) then
											v56 = {v53,v54,nil,v55};
											v57 = v22();
											v58 = {};
											v52 = 1280 - (803 + 475);
										end
										break;
									end
								end
							end
							break;
						end
						if (v51 == (1 + 0)) then
							local v91 = 400 - (131 + 269);
							while true do
								if (v91 == 1) then
									v51 = 2 + 0;
									break;
								end
								if (v91 ~= 0) then
								else
									v54 = nil;
									v55 = nil;
									v91 = 1778 - (1429 + 348);
								end
							end
						end
						if (v51 == (965 - (618 + 347))) then
							local v92 = 0 - 0;
							while true do
								if (v92 ~= 1) then
								else
									v51 = 2 - 1;
									break;
								end
								if (v92 == (0 + 0)) then
									v52 = 0;
									v53 = nil;
									v92 = 1;
								end
							end
						end
						if (v51 ~= 2) then
						else
							v56 = nil;
							v57 = nil;
							v51 = 1892 - (529 + 1360);
						end
					end
					break;
				end
				if (v50 == 2) then
					v55 = nil;
					v56 = nil;
					v50 = 261 - (56 + 202);
				end
				if (v50 == (303 - (239 + 61))) then
					v57 = nil;
					v58 = nil;
					v50 = 4;
				end
			end
		end
		local function v28(v34, v35, v36)
			local v59 = v34[1];
			local v60 = v34[2];
			local v61 = v34[3];
			return function(...)
				local v69 = 1;
				local v70 = -1;
				local v71 = {...};
				local v72 = v11("#", ...) - 1;
				local function v73()
					local v75 = v59;
					local v76 = Const;
					local v77 = v60;
					local v78 = v61;
					local v79 = v26;
					local v80 = {};
					local v81 = {};
					local v82 = {};
					for v87 = (0 + 0) - 0, v72 do
						if ((v87 >= v78) or ((1254 + 1944 + 149 + 815) <= (4091 - (76 + 25)))) then
							v80[v87 - v78] = v71[v87 + 1];
						else
							v82[v87] = v71[v87 + ((998 - (613 + 383)) - 1)];
						end
					end
					local v83 = (v72 - v78) + 1;
					local v84;
					local v85;
					while true do
						local v88 = 0 + 0;
						local v89;
						local v90;
						while true do
							if ((1225 < ((10383 - 5886) - 1812)) and (v88 == (854 - (145 + 709)))) then
								v89 = (2369 - 915) - (920 + (1491 - (857 + 100)));
								v90 = nil;
								v88 = 1 + 0;
							end
							if ((4542 >= (7118 - 5054)) and (1 == v88)) then
								while true do
									if (((175 + (1130 - (306 + 16))) <= (350 + 4539)) and (v89 == (0 - 0))) then
										v90 = 1415 - (603 + 812);
										while true do
											if (((10899 - 7127) > 510) and (v90 == (0 + 0))) then
												local v101 = 1382 - (1131 + 251);
												while true do
													if ((v101 == (1546 - (953 + 593))) or ((3379 + 1022) == (7339 - (2456 + 1660)))) then
														local v113 = 0 + (0 - 0);
														while true do
															if ((((2997 + 1457) - 3299) > (214 + 382)) and (v113 == (463 - ((2221 - (1770 + 22)) + 34)))) then
																v84 = v75[v69];
																v85 = v84[1 - 0];
																v113 = 1;
															end
															if ((v113 == (1 + 0)) or (((252 - 142) + 177) >= (50 + 2883))) then
																v101 = 1 - 0;
																break;
															end
														end
													end
													if ((290 <= 2772) and (v101 == (1037 - ((511 - (10 + 36)) + 571)))) then
														v90 = (2 + 1) - 2;
														break;
													end
												end
											end
											if (((5653 - (4061 - (243 + 17))) < (4596 - (371 + 224))) and (v90 == ((2 - 1) - 0))) then
												if ((2205 == (3644 - 1439)) and (v85 <= ((13 - 8) + 7))) then
													if ((2252 >= (61 + 31)) and (v85 <= (11 - 6))) then
														if ((v85 <= 2) or ((8209 - (6755 - (1003 + 517))) <= (966 - 495))) then
															if ((v85 <= (692 - (124 + 568))) or ((1362 + 2309) >= (2482 + 1856))) then
																local v122 = 324 - (181 + 143);
																local v123;
																local v124;
																local v125;
																while true do
																	if ((v122 == (1051 - (958 + (1523 - (170 + 1260))))) or ((755 - (518 + 18)) >= 3488)) then
																		v123 = 0 + 0;
																		v124 = nil;
																		v122 = 555 - (414 + 140);
																	end
																	if (((4586 - (240 + 547)) > 3796) and (v122 == (1 + 0))) then
																		v125 = nil;
																		while true do
																			if (((1406 - (951 + 455)) == v123) or ((1533 - 486) < (1543 - (524 + 541)))) then
																				local v191 = (0 - 0) + 0;
																				while true do
																					if (((268 + 2734) > 2594) and (v191 == 0)) then
																						v124 = 315 - (63 + 252);
																						v125 = nil;
																						v191 = (584 + 812) - (305 + 1090);
																					end
																					if (((137 + 480) == ((4214 - 3058) - 539)) and (v191 == (1 + 0))) then
																						v123 = 1 - 0;
																						break;
																					end
																				end
																			end
																			if (((3206 - (423 + 1244)) <= 4955) and (v123 == (1 - 0))) then
																				while true do
																					if ((v124 == 0) or (1631 >= (8442 - 4032))) then
																						v125 = v84[1 + 1];
																						v82[v125](v12(v82, v125 + (1761 - (1683 + 77)), v70));
																						break;
																					end
																				end
																				break;
																			end
																		end
																		break;
																	end
																end
															elseif ((v85 > (1042 - (259 + 782))) or ((2392 - (609 + 14)) >= (4652 - 2855))) then
																v82[v84[2]] = {};
															else
																v82[v84[2 + 0]] = v82[v84[769 - ((2364 - (1530 + 267)) + 199)]];
															end
														elseif ((v85 <= 3) or (((269 - (14 + 66)) - 100) >= (2141 - 937))) then
															do
																return;
															end
														elseif (((7490 - 4411) == (3235 - (144 + 12))) and (v85 == (774 - (1 + 462 + 307)))) then
															local v139 = 0 - 0;
															local v140;
															local v141;
															while true do
																if ((v139 == (0 + 0 + 0 + 0)) or ((5939 - (614 + 386)) < (1143 + 444))) then
																	v140 = (2475 - (209 + 438)) - (527 + 1301);
																	v141 = nil;
																	v139 = 1;
																end
																if ((v139 == 1) or (2921 == (2436 - (908 + 777)))) then
																	while true do
																		if (((829 + 90) == 919) and (v140 == (0 - 0))) then
																			v141 = v84[1790 - (981 + (2018 - (1018 + 193)))];
																			v82[v141](v82[v141 + ((6 - 4) - 1)]);
																			break;
																		end
																	end
																	break;
																end
															end
														else
															v82[v84[1 + 1]] = v36[v84[1471 - (884 + 584)]];
														end
													elseif (((1361 + 1102) <= 3366) and (v85 <= ((10 - 5) + 3))) then
														if (((2179 - (374 + 335)) == (1293 + 177)) and (v85 <= (12 - (1 + 5)))) then
															for v133 = v84[3 - 1], v84[235 - (29 + 203)] do
																v82[v133] = nil;
															end
														elseif (((3425 - 1158) >= (1317 - 785)) and (v85 > ((11 - 5) + 1))) then
															local v143 = 0 - 0;
															local v144;
															local v145;
															while true do
																if (((3714 + 684) >= (2512 + 623)) and (v143 == ((1717 - (834 + 882)) + 0 + 0))) then
																	while true do
																		if (((4760 - (1239 + 39)) <= (12679 - 8062)) and (v144 == (1312 - (505 + 807)))) then
																			v145 = v84[2];
																			v82[v145] = v82[v145]();
																			break;
																		end
																	end
																	break;
																end
																if (((369 + 527) <= (2508 - (35 + 40))) and (v143 == 0)) then
																	v144 = 1999 - (1833 + 166);
																	v145 = nil;
																	v143 = 1 + 0;
																end
															end
														else
															local v146 = 1326 - (243 + 1083);
															local v147;
															local v148;
															local v149;
															while true do
																if (((5805 - (1193 + 125)) == 4487) and (v146 == (0 + (0 - 0)))) then
																	v147 = 0;
																	v148 = nil;
																	v146 = 43 - (9 + (79 - 46));
																end
																if ((((2170 - (131 + 527)) - (334 + 572)) < 4139) and (v146 == (2 - 1))) then
																	v149 = nil;
																	while true do
																		if ((v147 == (1130 - ((1183 - (581 + 89)) + 617))) or ((4688 - (16 + 19)) == (384 + 249 + (10857 - 7094)))) then
																			v148 = 0;
																			v149 = nil;
																			v147 = 1 + 0;
																		end
																		if (((5358 - (237 + 769)) > (4334 - 3262)) and (v147 == (610 - (334 + (917 - 642))))) then
																			while true do
																				if ((v148 == (0 + 0)) or ((19138 - 14139) < (1054 + 161))) then
																					v149 = v84[2];
																					v82[v149](v12(v82, v149 + 1, v84[1257 - (699 + 555)]));
																					break;
																				end
																			end
																			break;
																		end
																	end
																	break;
																end
															end
														end
													elseif (((4297 - (111 + 963)) >= (3695 - (929 + 226))) and (v85 <= (24 - 14))) then
														if (((132 + 2665) <= (4869 - (280 + 219))) and (v85 == (773 - (484 + 166 + 114)))) then
															v82[v84[3 - 1]][v84[3]] = v84[3 + 1];
														else
															v82[v84[2 - 0]][v84[5 - 2]] = v82[v84[(150 + 391) - (141 + 396)]];
														end
													elseif ((v85 == 11) or ((3300 - (46 + 117 + 104)) >= (968 + 2973))) then
														local v152 = 0;
														local v153;
														local v154;
														local v155;
														local v156;
														local v157;
														while true do
															if ((v152 == (562 - (410 + 150))) or ((2414 + 694) <= (1585 - (13 + 1488)))) then
																v157 = nil;
																while true do
																	if (((554 - (285 + 268)) == v153) or ((2171 - (71 + 387)) > (1954 + 1388))) then
																		v70 = (v156 + v154) - ((4 - 3) + 0);
																		v157 = 0 - 0;
																		v153 = (517 - (293 + 222)) + 0;
																	end
																	if (((1405 + 3395) == (5494 - (519 + 175))) and ((0 - 0) == v153)) then
																		local v199 = 0 + 0;
																		while true do
																			if ((v199 == (0 + 0)) or ((1835 - (395 + 363)) >= (4904 - (760 + 30)))) then
																				v154 = v84[7 - 5];
																				v155, v156 = v79(v82[v154](v12(v82, v154 + 1, v84[7 - 4])));
																				v199 = 1 + 0;
																			end
																			if (((6605 - (1364 + 592)) >= (4620 - (294 + (1186 - (312 + 167))))) and (v199 == 1)) then
																				v153 = 1 - 0;
																				break;
																			end
																		end
																	end
																	if ((v153 == (4 - 2)) or ((15119 - 12061) == (18383 - (12292 + 1276)))) then
																		for v208 = v154, v70 do
																			local v209 = 1009 - (180 + 829);
																			while true do
																				if (((5994 - (523 + 1204)) >= (4107 - (125 + 697))) and (v209 == (1013 - (829 + 170 + 14)))) then
																					v157 = v157 + 1;
																					v82[v208] = v155[v157];
																					break;
																				end
																			end
																		end
																		break;
																	end
																end
																break;
															end
															if (((5232 - 3015) > (4786 - (13373 - 10559))) and (v152 == 1)) then
																v155 = nil;
																v156 = nil;
																v152 = 4 - (2 + 0);
															end
															if (((956 + 2299) >= (72 + 2262)) and (v152 == 0)) then
																v153 = 0;
																v154 = nil;
																v152 = 1;
															end
														end
													elseif (((4167 + 116) >= (386 + 69)) and (v82[v84[2]] == v84[(3534 - (866 + 699)) - (15 + 1950)])) then
														v69 = v69 + (2 - 1);
													else
														v69 = v84[3];
													end
												elseif ((v85 <= (11 + 6 + 1)) or (((236 + 3615) - 979) < (915 - (59 + 434)))) then
													if (((2384 - ((1077 - 539) + 570)) > (362 + 20)) and (v85 <= (50 - 35))) then
														if ((v85 <= (1929 - (325 + 1591))) or ((16014 - 12507) >= (10351 - 5391))) then
															v69 = v84[1934 - (632 + 1299)];
														elseif (((490 + 86) <= (11793 - 7533)) and (v85 == (18 - 4))) then
															local v158 = 0 + 0;
															local v159;
															local v160;
															local v161;
															local v162;
															local v163;
															while true do
																if ((v158 == (411 - (409 + 2))) or ((692 - (36 + 104)) < (1908 - (1254 + 501)))) then
																	v159 = (0 - 0) - 0;
																	v160 = nil;
																	v158 = 2 - (1 - 0);
																end
																if (((2321 + 1330) >= (2376 - (453 + 689))) and (v158 == (51 - (21 + 29)))) then
																	v161 = nil;
																	v162 = nil;
																	v158 = 3 - 1;
																end
																if (((1508 - (127 + 194)) <= (2840 - ((523 - (420 + 18)) + 1157))) and (v158 == (1 + 1))) then
																	v163 = nil;
																	while true do
																		if ((v159 == 2) or ((1216 + 384) > (393 + 2152))) then
																			for v210 = v160, v70 do
																				local v211 = 0;
																				local v212;
																				while true do
																					if (((9240 - (13217 - 7366)) < (16963 - 13352)) and (v211 == ((1130 + 235) - (935 + 428 + 2)))) then
																						v212 = 0 - 0;
																						while true do
																							if (((2568 - (873 + 58)) > (240 + 252)) and (v212 == (0 + 0))) then
																								v163 = v163 + 1;
																								v82[v210] = v161[v163];
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																		if ((1768 <= (1555 + 565)) and (v159 == (1942 - (1200 + 741)))) then
																			local v200 = 0;
																			while true do
																				if ((v200 == (0 - 0)) or (1443 > (8853 - 5226))) then
																					v70 = (v162 + v160) - (126 - (117 + 8));
																					v163 = 1421 - (552 + 869);
																					v200 = 1;
																				end
																				if ((461 <= (1231 - 460)) and (v200 == (1 + 0))) then
																					v159 = 2;
																					break;
																				end
																			end
																		end
																		if ((v159 == 0) or (2124 > (11063 - 7967))) then
																			local v201 = 1421 - (1292 + 129);
																			while true do
																				if ((v201 == (1 + 0)) or ((4245 + 545) <= 278)) then
																					v159 = 1 + 0;
																					break;
																				end
																				if ((0 == v201) or (((2079 + 671) - (650 + 226)) > (421 + 3155))) then
																					v160 = v84[1 + 1];
																					v161, v162 = v79(v82[v160](v82[v160 + 1 + 0]));
																					v201 = 1 + 0;
																				end
																			end
																		end
																	end
																	break;
																end
															end
														else
															local v164 = 0;
															local v165;
															local v166;
															local v167;
															while true do
																if (((3365 + (2845 - (612 + 1325))) >= (2400 - (185 + 324))) and (v164 == (1072 - (400 + 671)))) then
																	v167 = nil;
																	while true do
																		if ((v165 == (543 - (46 + (801 - (65 + 240))))) or ((3046 - ((1906 - (552 + 1226)) + 209)) >= ((1005 + 4655) - (768 + 10)))) then
																			v82[v166 + 1] = v167;
																			v82[v166] = v167[v84[3 + 1]];
																			break;
																		end
																		if ((4012 == 4012) and (0 == v165)) then
																			local v204 = 0 - (144 - (5 + 139));
																			while true do
																				if ((((977 - (261 + 41)) + 593) < (8102 - 6067)) and (v204 == (1 - 0))) then
																					v165 = 1 + 0 + 0;
																					break;
																				end
																				if (((4716 - (437 + 133)) <= (4576 + 180)) and (v204 == 0)) then
																					v166 = v84[2 + 0];
																					v167 = v82[v84[1707 - (531 + 1173)]];
																					v204 = (1 + 2) - 2;
																				end
																			end
																		end
																	end
																	break;
																end
																if ((v164 == 0) or (((1162 - 544) + 1544) >= (4525 - (645 + 1032)))) then
																	v165 = 0;
																	v166 = nil;
																	v164 = 1 + 0;
																end
															end
														end
													elseif ((v85 <= ((211 + 311) - (225 + 281))) or ((5470 - (759 + 435)) <= (3005 - (734 + 216)))) then
														local v126 = 0 - 0;
														local v127;
														local v128;
														local v129;
														local v130;
														local v131;
														while true do
															if (((4170 - (158 + 51)) >= ((3209 + 327) - (40 + 1254))) and ((2 + 0) == v126)) then
																v131 = nil;
																while true do
																	if (((2425 - (1231 + 39 + 292)) <= (2898 - 840)) and (2 == v127)) then
																		while true do
																			if ((v128 == 0) or ((16 + 298) <= (45 + 246))) then
																				local v213 = 1667 - (1155 + 512);
																				local v214;
																				while true do
																					if (((2363 - ((1580 - (293 + 1026)) + 249)) < (4694 - (98 + 80))) and (v213 == 0)) then
																						v214 = 0;
																						while true do
																							if ((v214 == (1 - 0)) or ((3202 + 644) >= 4185)) then
																								v128 = 1 - 0;
																								break;
																							end
																							if (((316 + 2389) <= (11674 - 8809)) and (v214 == (1747 - (817 + 930)))) then
																								local v229 = 1166 - (97 + 1069);
																								while true do
																									if ((v229 == 1) or (((526 - (80 + 36)) + 773) > (3542 - (163 + 1139)))) then
																										v214 = 1 + 0;
																										break;
																									end
																									if ((v229 == 0) or (788 == (640 + 1507 + 946))) then
																										v129 = v84[2];
																										v130 = v82[v129];
																										v229 = (3586 - (48 + 1839)) - ((1610 - 1258) + 1346);
																									end
																								end
																							end
																						end
																						break;
																					end
																				end
																			end
																			if (((1938 - (685 + 1252)) == v128) or ((4944 - 3685) > (3824 - 1583))) then
																				v131 = v84[770 - (765 + 2)];
																				for v218 = 1 + 0, v131 do
																					v130[v218] = v82[v129 + v218];
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if ((v127 == (2 - 1)) or ((1224 - (303 + 722)) >= (2864 - 551))) then
																		local v192 = 0;
																		while true do
																			if ((1173 <= (309 + 1564 + 216)) and (v192 == 0)) then
																				v130 = nil;
																				v131 = nil;
																				v192 = 1383 - ((1945 - (288 + 598)) + (862 - 539));
																			end
																			if (((3646 - 962) <= 3748) and (v192 == (1016 - (302 + 713)))) then
																				v127 = 2;
																				break;
																			end
																		end
																	end
																	if ((v127 == (0 - 0)) or (3909 < (508 - (6 + 370)))) then
																		local v193 = 0 - 0;
																		while true do
																			if ((v193 == 0) or (((4539 - 1870) + 967) < ((942 - 528) + 621))) then
																				v128 = 0 - 0;
																				v129 = nil;
																				v193 = 1;
																			end
																			if ((v193 == (4 - (3 + 0))) or ((509 - (84 + (1056 - (373 + 673)))) >= ((2980 - (661 + 220)) + 1997))) then
																				v127 = 1;
																				break;
																			end
																		end
																	end
																end
																break;
															end
															if (((6455 - 3909) > (450 + 307)) and (v126 == (0 - 0))) then
																v127 = (0 - 0) - 0;
																v128 = nil;
																v126 = 894 - (761 + 132);
															end
															if ((v126 == (1 - 0)) or ((7252 - 3167) <= (2099 - (46 + 530 + 1231)))) then
																v129 = nil;
																v130 = nil;
																v126 = 2;
															end
														end
													elseif ((v85 > (7 + 10)) or ((1423 - 902) < (184 + 154))) then
														local v168 = 0;
														local v169;
														local v170;
														local v171;
														while true do
															if (((4080 - (366 + 209)) > (12 + 108)) and (v168 == (1 + 0))) then
																v171 = nil;
																while true do
																	if (((6504 - (1448 + 161)) > (2763 - (203 + 211))) and (v169 == (1 + 0))) then
																		for v215 = v170 + (2 - 1) + 0, v84[3 + 0] do
																			v7(v171, v82[v215]);
																		end
																		break;
																	end
																	if ((v169 == (0 - 0)) or ((4521 - 1994) == (7172 - 3947))) then
																		v170 = v84[1 + 1];
																		v171 = v82[v170];
																		v169 = 1;
																	end
																end
																break;
															end
															if ((v168 == (0 + 0)) or ((6908 - (10669 - 7030)) >= ((9163 - 3845) - (261 + 913)))) then
																v169 = (1722 - (508 + 1041)) - (77 + (147 - 51));
																v170 = nil;
																v168 = (1009 - (42 + 41)) - (113 + 812);
															end
														end
													else
														v82[v84[2]] = v28(v77[v84[(16 - 10) - 3]], nil, v36);
													end
												elseif ((v85 <= (27 - 6)) or ((20423 - 16028) == (3722 - (737 + 236 + 23)))) then
													if (((11 + 718) < (6265 - (4524 - (281 + 1383)))) and (v85 <= (7 + 12))) then
														v82[v84[2]] = v84[2 + 1];
													elseif ((((695 + 1235) - (518 + 64)) <= 4385) and (v85 > (8 + 12))) then
														v82[v84[1393 - (1197 + 194)]]();
													else
														v82[v84[1215 - (784 + 429)]] = v84[3] ~= (0 - (0 + 0));
													end
												elseif ((v85 <= (319 - (8 + 20 + 268))) or ((5198 - 2661) >= ((1329 + 9635) - 6577))) then
													if (((7872 - 4226) > ((6203 - 2414) - (19 + 212))) and (v85 == ((14 - 8) + 16))) then
														if ((v84[2] == v82[v84[(2 + 4) - 2]]) or ((3734 - 1259) >= (4904 - (13 + 9)))) then
															v69 = v69 + 1 + 0;
														else
															v69 = v84[(1577 - (1305 + 271)) + 2];
														end
													else
														v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
													end
												elseif (((3728 - 2298) < (4554 - (502 + 119))) and (v85 == (1793 - (210 + 1559)))) then
													local v175 = 0;
													local v176;
													local v177;
													local v178;
													while true do
														if ((299 < (5165 - (177 + 731))) and ((0 + 0) == v175)) then
															v176 = 814 - (142 + 672);
															v177 = nil;
															v175 = 1 + 0;
														end
														if ((v175 == ((661 - (450 + 209)) - 1)) or (((2255 - 1156) + 1381) < 1012)) then
															v178 = nil;
															while true do
																if ((v176 == (1 + 0)) or ((3328 - (351 + 372)) >= (5203 - (655 + 85)))) then
																	while true do
																		if (((4393 - (1007 + 460)) >= 1798) and (v177 == (0 - 0))) then
																			v178 = v84[625 - (527 + 96)];
																			v82[v178] = v82[v178](v12(v82, v178 + 1, v84[1 + 2]));
																			break;
																		end
																	end
																	break;
																end
																if (((1430 - 780) <= (2567 - (107 + 964))) and (v176 == 0)) then
																	local v205 = 931 - (225 + 706);
																	while true do
																		if (((509 + 86) < ((4697 - (81 + 21)) - (15 + 195 + 34))) and (v205 == ((0 - 0) - 0))) then
																			v177 = (0 - 0) + 0;
																			v178 = nil;
																			v205 = 1;
																		end
																		if ((v205 == (3 - 2)) or ((1766 + 2845) < (3099 - (286 + 1508)))) then
																			v176 = 1436 - (1319 + 116);
																			break;
																		end
																	end
																end
															end
															break;
														end
													end
												else
													local v179 = 450 - (398 + 52);
													local v180;
													local v181;
													local v182;
													while true do
														if (((464 + 1572) < ((4824 - (896 + 707)) - (28 + 1149))) and (v179 == (1243 - (174 + 1069)))) then
															v180 = 0 - 0;
															v181 = nil;
															v179 = 2 - 1;
														end
														if ((v179 == (2 - 1)) or ((4510 + 50) < ((8707 - 3606) - (162 + 1769)))) then
															v182 = nil;
															while true do
																if ((v180 == (0 + 0)) or ((456 - 300) >= (6307 - (1336 + 280)))) then
																	local v206 = 0 - 0;
																	while true do
																		if ((1786 > ((773 + 441) - 789)) and (v206 == (222 - (17 + 205)))) then
																			v181 = 0 - 0;
																			v182 = nil;
																			v206 = 1 + 0;
																		end
																		if ((v206 == (677 - (335 + 212 + 129))) or (4508 < 2757)) then
																			v180 = (2 - 0) - 1;
																			break;
																		end
																	end
																end
																if ((v180 == 1) or ((6728 - 4715) > (1744 + 247 + 2875))) then
																	while true do
																		if (((3908 - (487 + 751)) > 2340) and (v181 == (0 + 0 + 0))) then
																			v182 = v84[2];
																			v82[v182] = v82[v182](v12(v82, v182 + 1, v70));
																			break;
																		end
																	end
																	break;
																end
															end
															break;
														end
													end
												end
												v69 = v69 + 1 + 0;
												break;
											end
										end
										break;
									end
								end
								break;
							end
						end
					end
				end
				A, B = v26(v10(v73));
				if not A[1] then
					local v86 = v34[4][v69] or "?";
					error("Script error at [" .. v86 .. "]:" .. A[2]);
				else
					return v12(A, 2, B);
				end
			end;
		end
		return v28(v27(), {}, v16)();
	end
	vv8());
end
